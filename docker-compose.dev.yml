version: '3.8'

services:

  # SERVICES
  product-service:
    build:
      context: ./
      dockerfile: ./Dockerfile.dev
      args:
        username: ${DOCKER_IMAGES_OS_USERNAME}
        useruid: ${DOCKER_IMAGES_OS_USERUID}
        usergid: ${DOCKER_IMAGES_OS_USERGID}
        service_folder_name: product-service
    deploy:
      replicas: ${PRODUCT_SERVICE_NUM_OF_REPLICAS}
    mem_limit: ${DOCKER_COMPOSE_SERVICES_MEMORY_LIMIT}
    environment:
      JVM_OPTS: ${DOCKER_COMPOSE_SERVICES_JVM_OPTS}
    ports:
      - ${PRODUCT_SERVICE_HOST_MIN_PORT}-${PRODUCT_SERVICE_HOST_MAX_PORT}:${PRODUCT_SERVICE_CONTAINER_PORT} # App
      - ${PRODUCT_SERVICE_DEBUGGER_HOST_MIN_PORT}-${PRODUCT_SERVICE_DEBUGGER_HOST_MAX_PORT}:5005 # Debugger
      - ${PRODUCT_SERVICE_LIVE_RELOAD_HOST_MIN_PORT}-${PRODUCT_SERVICE_LIVE_RELOAD_HOST_MAX_PORT}:35729 # Livereload
    volumes:
      - ./product-service:/app/product-service
      - ./product-service-contracts:/app/product-service-contracts
      - ./common:/app/common
      - ./pom.xml:/app/pom.xml
      - ./.env:/app/.env
      - ${HOME}/.m2:/home/${DOCKER_IMAGES_OS_USERNAME}/.m2
    depends_on:
      product-service-mongo:
        condition: service_started
      discovery-server-service:
        condition: service_healthy

  inventory-service:
    build:
      context: ./
      dockerfile: ./Dockerfile.dev
      args:
        username: ${DOCKER_IMAGES_OS_USERNAME}
        useruid: ${DOCKER_IMAGES_OS_USERUID}
        usergid: ${DOCKER_IMAGES_OS_USERGID}
        service_folder_name: inventory-service
    deploy:
      replicas: ${INVENTORY_SERVICE_NUM_OF_REPLICAS}
    mem_limit: ${DOCKER_COMPOSE_SERVICES_MEMORY_LIMIT}
    environment:
      JVM_OPTS: ${DOCKER_COMPOSE_SERVICES_JVM_OPTS}
    ports:
      - ${INVENTORY_SERVICE_HOST_MIN_PORT}-${INVENTORY_SERVICE_HOST_MAX_PORT}:${INVENTORY_SERVICE_CONTAINER_PORT} # App
      - ${INVENTORY_SERVICE_DEBUGGER_HOST_MIN_PORT}-${INVENTORY_SERVICE_DEBUGGER_HOST_MAX_PORT}:5005 # Debugger
      - ${INVENTORY_SERVICE_LIVE_RELOAD_HOST_MIN_PORT}-${INVENTORY_SERVICE_LIVE_RELOAD_HOST_MAX_PORT}:35729 # Livereload
    volumes:
      - ./inventory-service:/app/inventory-service
      - ./inventory-service-contracts:/app/inventory-service-contracts
      - ./common:/app/common
      - ./pom.xml:/app/pom.xml
      - ./.env:/app/.env
      - ${HOME}/.m2:/home/${DOCKER_IMAGES_OS_USERNAME}/.m2
    depends_on:
      inventory-service-postgres:
        condition: service_started
      discovery-server-service:
        condition: service_healthy

  order-service:
    build:
      context: ./
      dockerfile: ./Dockerfile.dev
      args:
        username: ${DOCKER_IMAGES_OS_USERNAME}
        useruid: ${DOCKER_IMAGES_OS_USERUID}
        usergid: ${DOCKER_IMAGES_OS_USERGID}
        service_folder_name: order-service
    deploy:
      replicas: ${ORDER_SERVICE_NUM_OF_REPLICAS}
    mem_limit: ${DOCKER_COMPOSE_SERVICES_MEMORY_LIMIT}
    environment:
      JVM_OPTS: ${DOCKER_COMPOSE_SERVICES_JVM_OPTS}
    ports:
      - ${ORDER_SERVICE_HOST_MIN_PORT}-${ORDER_SERVICE_HOST_MAX_PORT}:${ORDER_SERVICE_CONTAINER_PORT} # App
      - ${ORDER_SERVICE_DEBUGGER_HOST_MIN_PORT}-${ORDER_SERVICE_DEBUGGER_HOST_MAX_PORT}:5005 # Debugger
      - ${ORDER_SERVICE_LIVE_RELOAD_HOST_MIN_PORT}-${ORDER_SERVICE_LIVE_RELOAD_HOST_MAX_PORT}:35729 # Livereload
    volumes:
      - ./order-service:/app/order-service
      - ./order-service-contracts:/app/order-service-contracts
      - ./inventory-service-contracts:/app/inventory-service-contracts
      - ./product-service-contracts:/app/product-service-contracts
      - ./common:/app/common
      - ./pom.xml:/app/pom.xml
      - ./.env:/app/.env
      - ${HOME}/.m2:/home/${DOCKER_IMAGES_OS_USERNAME}/.m2
    depends_on:
      order-service-postgres:
        condition: service_started
      discovery-server-service:
        condition: service_healthy
      broker:
        condition: service_started

  auth-service:
    build:
      context: ./
      dockerfile: ./Dockerfile.dev
      args:
        username: ${DOCKER_IMAGES_OS_USERNAME}
        useruid: ${DOCKER_IMAGES_OS_USERUID}
        usergid: ${DOCKER_IMAGES_OS_USERGID}
        service_folder_name: auth-service
    deploy:
      replicas: ${AUTH_SERVICE_NUM_OF_REPLICAS}
    mem_limit: ${DOCKER_COMPOSE_SERVICES_MEMORY_LIMIT}
    environment:
      JVM_OPTS: ${DOCKER_COMPOSE_SERVICES_JVM_OPTS}
    ports:
      - ${AUTH_SERVICE_HOST_MIN_PORT}-${AUTH_SERVICE_HOST_MAX_PORT}:${AUTH_SERVICE_CONTAINER_PORT} # App
      - ${AUTH_SERVICE_DEBUGGER_HOST_MIN_PORT}-${AUTH_SERVICE_DEBUGGER_HOST_MAX_PORT}:5005 # Debugger
      - ${AUTH_SERVICE_LIVE_RELOAD_HOST_MIN_PORT}-${AUTH_SERVICE_LIVE_RELOAD_HOST_MAX_PORT}:35729 # Livereload
    volumes:
      - ./auth-service:/app/auth-service
      - ./auth-service-contracts:/app/auth-service-contracts
      - ./common:/app/common
      - ./pom.xml:/app/pom.xml
      - ./.env:/app/.env
      - ${HOME}/.m2:/home/${DOCKER_IMAGES_OS_USERNAME}/.m2
    depends_on:
      auth-service-postgres:
        condition: service_started
      discovery-server-service:
        condition: service_healthy

  notification-service:
    build:
      context: ./
      dockerfile: ./Dockerfile.dev
      args:
        username: ${DOCKER_IMAGES_OS_USERNAME}
        useruid: ${DOCKER_IMAGES_OS_USERUID}
        usergid: ${DOCKER_IMAGES_OS_USERGID}
        service_folder_name: notification-service
    deploy:
      replicas: ${NOTIFICATION_SERVICE_NUM_OF_REPLICAS}
    mem_limit: ${DOCKER_COMPOSE_SERVICES_MEMORY_LIMIT}
    environment:
      JVM_OPTS: ${DOCKER_COMPOSE_SERVICES_JVM_OPTS}
    ports:
      - ${NOTIFICATION_SERVICE_HOST_MIN_PORT}-${NOTIFICATION_SERVICE_HOST_MAX_PORT}:${NOTIFICATION_SERVICE_CONTAINER_PORT} # App
      - ${NOTIFICATION_SERVICE_DEBUGGER_HOST_MIN_PORT}-${NOTIFICATION_SERVICE_DEBUGGER_HOST_MAX_PORT}:5005 # Debugger
      - ${NOTIFICATION_SERVICE_LIVE_RELOAD_HOST_MIN_PORT}-${NOTIFICATION_SERVICE_LIVE_RELOAD_HOST_MAX_PORT}:35729 # Livereload
    volumes:
      - ./notification-service:/app/notification-service
      - ./order-service-contracts:/app/order-service-contracts
      - ./auth-service-contracts:/app/auth-service-contracts
      - ./common:/app/common
      - ./pom.xml:/app/pom.xml
      - ./.env:/app/.env
      - ${HOME}/.m2:/home/${DOCKER_IMAGES_OS_USERNAME}/.m2
    depends_on:
      broker:
        condition: service_started
      discovery-server-service:
        condition: service_healthy

  discovery-server-service:
    container_name: discovery-server-service
    build:
      context: ./
      dockerfile: ./Dockerfile.dev
      args:
        username: ${DOCKER_IMAGES_OS_USERNAME}
        useruid: ${DOCKER_IMAGES_OS_USERUID}
        usergid: ${DOCKER_IMAGES_OS_USERGID}
        service_folder_name: discovery-server-service
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://discovery-server-service:${DISCOVERY_SERVER_SERVICE_PORT}"
        ]
      interval: 5s
      timeout: 3s
      retries: 10
    mem_limit: ${DOCKER_COMPOSE_SERVICES_MEMORY_LIMIT}
    environment:
      JVM_OPTS: ${DOCKER_COMPOSE_SERVICES_JVM_OPTS}
    ports:
      - ${DISCOVERY_SERVER_SERVICE_PORT}:${DISCOVERY_SERVER_SERVICE_PORT} # App
      - ${DISCOVERY_SERVER_SERVICE_DEBUGGER_PORT}:5005 # Debugger
      - ${DISCOVERY_SERVER_SERVICE_LIVE_RELOAD_PORT}:35729 # Livereload
    volumes:
      - ./discovery-server-service:/app/discovery-server-service
      - ./pom.xml:/app/pom.xml
      - ./.env:/app/.env
      - ${HOME}/.m2:/home/${DOCKER_IMAGES_OS_USERNAME}/.m2
    depends_on:
      - zipkin

  api-gateway-service:
    container_name: api-gateway-service
    build:
      context: ./
      dockerfile: ./Dockerfile.dev
      args:
        username: ${DOCKER_IMAGES_OS_USERNAME}
        useruid: ${DOCKER_IMAGES_OS_USERUID}
        usergid: ${DOCKER_IMAGES_OS_USERGID}
        service_folder_name: api-gateway-service
    mem_limit: ${DOCKER_COMPOSE_SERVICES_MEMORY_LIMIT}
    environment:
      JVM_OPTS: ${DOCKER_COMPOSE_SERVICES_JVM_OPTS}
    ports:
      - ${API_GATEWAY_SERVICE_PORT}:${API_GATEWAY_SERVICE_PORT} # App
      - ${API_GATEWAY_SERVICE_DEBUGGER_PORT}:5005 # Debugger
      - ${API_GATEWAY_SERVICE_LIVE_RELOAD_PORT}:35729 # Livereload
    volumes:
      - ./api-gateway-service:/app/api-gateway-service
      - ./common:/app/common
      - ./pom.xml:/app/pom.xml
      - ./.env:/app/.env
      - ${HOME}/.m2:/home/${DOCKER_IMAGES_OS_USERNAME}/.m2
    depends_on:
      discovery-server-service:
        condition: service_healthy

  # MONGO
  product-service-mongo:
    container_name: product-service-mongo
    image: mongo:6.0.5
    command: mongod --port ${PRODUCT_SERVICE_MONGO_PORT}
    restart: always
    ports:
      - ${PRODUCT_SERVICE_MONGO_PORT}:${PRODUCT_SERVICE_MONGO_PORT}
    expose:
      - ${PRODUCT_SERVICE_MONGO_PORT}
    volumes:
      - ./_databases/product-service-mongo-data:/data/db:rw
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${PRODUCT_SERVICE_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${PRODUCT_SERVICE_MONGO_PASSWORD}

  product-service-mongo-express:
    container_name: product-service-mongo-express
    image: mongo-express
    restart: always
    ports:
      - ${PRODUCT_SERVICE_MONGO_EXPRESS_PORT}:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${PRODUCT_SERVICE_MONGO_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${PRODUCT_SERVICE_MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${PRODUCT_SERVICE_MONGO_USERNAME}:${PRODUCT_SERVICE_MONGO_PASSWORD}@${PRODUCT_SERVICE_MONGO_HOST}:${PRODUCT_SERVICE_MONGO_PORT}/
      ME_CONFIG_SITE_BASEURL: ${PRODUCT_SERVICE_MONGO_EXPRESS_BASEURL}
      ME_CONFIG_OPTIONS_EDITORTHEME: 'dracula'
    depends_on:
      - product-service-mongo

  # POSTGRES
  inventory-service-postgres:
    container_name: inventory-service-postgres
    image: postgres:15.2
    command: -p ${INVENTORY_SERVICE_POSTGRES_PORT}
    restart: always
    ports:
      - ${INVENTORY_SERVICE_POSTGRES_PORT}:${INVENTORY_SERVICE_POSTGRES_PORT}
    expose:
      - ${INVENTORY_SERVICE_POSTGRES_PORT}
    volumes:
      - ./_databases/inventory-service-postgres-data:/data/postgres:rw
    environment:
      POSTGRES_DB: ${INVENTORY_SERVICE_POSTGRES_DATABASE}
      POSTGRES_USER: ${INVENTORY_SERVICE_POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${INVENTORY_SERVICE_POSTGRES_PASSWORD}
      PGPORT: ${INVENTORY_SERVICE_POSTGRES_PORT}
      PGDATA: /data/postgres

  order-service-postgres:
    container_name: order-service-postgres
    image: postgres:15.2
    command: -p ${ORDER_SERVICE_POSTGRES_PORT}
    restart: always
    ports:
      - ${ORDER_SERVICE_POSTGRES_PORT}:${ORDER_SERVICE_POSTGRES_PORT}
    expose:
      - ${ORDER_SERVICE_POSTGRES_PORT}
    volumes:
      - ./_databases/order-service-postgres-data:/data/postgres:rw
    environment:
      POSTGRES_DB: ${ORDER_SERVICE_POSTGRES_DATABASE}
      POSTGRES_USER: ${ORDER_SERVICE_POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${ORDER_SERVICE_POSTGRES_PASSWORD}
      PGPORT: ${ORDER_SERVICE_POSTGRES_PORT}
      PGDATA: /data/postgres

  auth-service-postgres:
    container_name: auth-service-postgres
    image: postgres:15.2
    command: -p ${AUTH_SERVICE_POSTGRES_PORT}
    restart: always
    ports:
      - ${AUTH_SERVICE_POSTGRES_PORT}:${AUTH_SERVICE_POSTGRES_PORT}
    expose:
      - ${AUTH_SERVICE_POSTGRES_PORT}
    volumes:
      - ./_databases/auth-service-postgres-data:/data/postgres:rw
    environment:
      POSTGRES_DB: ${AUTH_SERVICE_POSTGRES_DATABASE}
      POSTGRES_USER: ${AUTH_SERVICE_POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${AUTH_SERVICE_POSTGRES_PASSWORD}
      PGPORT: ${AUTH_SERVICE_POSTGRES_PORT}
      PGDATA: /data/postgres

  postgres-adminer:
    container_name: postgres-adminer
    image: adminer
    restart: always
    ports:
      - ${POSTGRES_ADMINER_PORT}:8080
    environment:
      ADMINER_DESIGN: 'dracula'
    depends_on:
      - inventory-service-postgres
      - order-service-postgres

  # Zipkin
  zipkin:
    image: openzipkin/zipkin:2.24.0-amd64
    container_name: zipkin
    command: --zipkin.ui.basepath=${ZIPKIN_UI_BASEPATH}
    restart: always
    environment:
      - QUERY_PORT=${ZIPKIN_PORT}
    ports:
      - ${ZIPKIN_PORT}:${ZIPKIN_PORT}

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      # https://docs.confluent.io/platform/current/installation/docker/operations/external-volumes.html#data-volumes-for-kafka-and-zk
      - ./_databases/zookeeper/data:/var/lib/zookeeper/data
      - ./_databases/zookeeper/log:/var/lib/zookeeper/log

  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      - ${BROKER_EXTERNAL_PORT}:${BROKER_EXTERNAL_PORT}
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:${ZOOKEEPER_CLIENT_PORT}'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:${BROKER_EXTERNAL_PORT},PLAINTEXT_INTERNAL://broker:${BROKER_INTERNAL_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: ${BROKER_METRICS_PORT}
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=broker -Dcom.sun.management.jmxremote.rmi.port=${BROKER_METRICS_PORT}
    volumes:
      # https://docs.confluent.io/platform/current/installation/docker/operations/external-volumes.html#data-volumes-for-kafka-and-zk
      - ./_databases/kafka/data:/var/lib/kafka/data

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - ${KAFKA_UI_PORT}:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: spring-microservices
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:${BROKER_INTERNAL_PORT}
      KAFKA_CLUSTERS_0_METRICS_PORT: ${BROKER_METRICS_PORT}
      DYNAMIC_CONFIG_ENABLED: true
      SERVER_SERVLET_CONTEXT_PATH: ${KAFKA_UI_CONTEXT_PATH}
    # volumes:
    #   - ./configs/kafka_ui_config.yaml:/etc/kafkaui/dynamic_config.yaml
    depends_on:
      - broker
